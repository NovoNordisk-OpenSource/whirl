[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2024 Novo Nordisk A/S, Danish company registration no. 24256790  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aksel Thomsen. Author, maintainer. Lovemore Gakava. Author. Cervan Girard. Author. Kristian Troejelsgaard. Author. Novo Nordisk /S. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thomsen , Gakava L, Girard C, Troejelsgaard K (2024). whirl: Logging package. R package version 0.0.3.","code":"@Manual{,   title = {whirl: Logging package},   author = {Aksel Thomsen and Lovemore Gakava and Cervan Girard and Kristian Troejelsgaard},   year = {2024},   note = {R package version 0.0.3}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Logging package","text":"whirl package provide functionalities executing scripts batch simultaneously getting log individual executions. log script execution many pharmaceutical companies GxP requirement, whirl package honors requirement generating log , among things, contains information : Status (script run error warnings) actual code Date time execution environment script executed (session info) Information packages versions utilized Environmental variables wrapped nicely formatted html document easy navigate.","code":""},{"path":"/index.html","id":"how-to","dir":"","previous_headings":"","what":"How to","title":"Logging package","text":"path argument run() currently supports single scripts, multiple scripts, folders, /config files ().","code":""},{"path":[]},{"path":"/reference/align_left.html","id":null,"dir":"Reference","previous_headings":"","what":"Left-align text and pad to same length. — align_left","title":"Left-align text and pad to same length. — align_left","text":"Left-align text pad length.","code":""},{"path":"/reference/align_left.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Left-align text and pad to same length. — align_left","text":"","code":"align_left(   text,   width = max(nchar(text)),   type = c(\"non-trimmed\", \"trimmed\"),   sep = \" \",   keep.empty = TRUE )"},{"path":"/reference/align_left.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Left-align text and pad to same length. — align_left","text":"text character strings left-aligned. width numeric indicating desired length strings. type character specifying pre-processing. Trims whitespace text set \"trimmed\". sep character specifying padding. May give unexpected results single character. keep.empty logical Indicate empty strings kept empty.","code":""},{"path":"/reference/align_left.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Left-align text and pad to same length. — align_left","text":"character left-aligned text.","code":""},{"path":"/reference/custom_logging.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to log custom messages — custom_logging","title":"Helper function to log custom messages — custom_logging","text":"Useful e.g. read write operations databases etc. automatically captured.","code":""},{"path":"/reference/custom_logging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to log custom messages — custom_logging","text":"","code":"log_read(file, log = Sys.getenv(\"WHIRL_LOG_MSG\"))  log_write(file, log = Sys.getenv(\"WHIRL_LOG_MSG\"))  log_delete(file, log = Sys.getenv(\"WHIRL_LOG_MSG\"))"},{"path":"/reference/custom_logging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to log custom messages — custom_logging","text":"file character() description file read, written deleted. log character() path log file.","code":""},{"path":"/reference/custom_logging.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function to log custom messages — custom_logging","text":"default environment variable WHIRL_LOG_MSG set session used log scripts, input automatically captured resulting log. run outside whirl, meaning environment variable unset, aoperations streamed stdout(). default console.","code":""},{"path":"/reference/define_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Find path for files to log — define_paths","title":"Find path for files to log — define_paths","text":"Find path files log","code":""},{"path":"/reference/define_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find path for files to log — define_paths","text":"","code":"define_paths(step, root_dir, cli_level = cli::cli_h1)"},{"path":"/reference/define_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find path for files to log — define_paths","text":"step step yaml (list R) root_dir root dir yaml file cli_level function cli","code":""},{"path":"/reference/enrich_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Converting input to a standardized list with that contain step names and files paths — enrich_input","title":"Converting input to a standardized list with that contain step names and files paths — enrich_input","text":"Converting input standardized list contain step names files paths","code":""},{"path":"/reference/enrich_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converting input to a standardized list with that contain step names and files paths — enrich_input","text":"","code":"enrich_input(input, steps = NULL)"},{"path":"/reference/enrich_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converting input to a standardized list with that contain step names and files paths — enrich_input","text":"input Can vector, list whirl config file. steps filter argument selecting specific steps executed","code":""},{"path":"/reference/enrich_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converting input to a standardized list with that contain step names and files paths — enrich_input","text":"list","code":""},{"path":"/reference/internal_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Sending the scripts to the whirl_r_queue for execution — internal_run","title":"Sending the scripts to the whirl_r_queue for execution — internal_run","text":"Sending scripts whirl_r_queue execution","code":""},{"path":"/reference/internal_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sending the scripts to the whirl_r_queue for execution — internal_run","text":"","code":"internal_run(input, steps, queue, level)"},{"path":"/reference/internal_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sending the scripts to the whirl_r_queue for execution — internal_run","text":"input character vector file path(s) R, R Markdown, Quarto scripts, files folder using regular expression, whirl config file. input can also structured list element executed parallel. steps optional argument can used certain steps within config files executed. equivalent names steps found config file. kept NULL (default) steps listed config file executed. queue whirl_r_queue execute scripts level Depth recursive config calls. initial call 1","code":""},{"path":"/reference/internal_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sending the scripts to the whirl_r_queue for execution — internal_run","text":"tibble containing execution results scripts.","code":""},{"path":"/reference/logging_from_yaml.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and create summary data frame — logging_from_yaml","title":"Read and create summary data frame — logging_from_yaml","text":"Read create summary data frame","code":""},{"path":"/reference/logging_from_yaml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and create summary data frame — logging_from_yaml","text":"","code":"logging_from_yaml(   file,   summary_dir,   root_dir,   summary,   steps = NULL,   cli_level = cli::cli_h2 )"},{"path":"/reference/logging_from_yaml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and create summary data frame — logging_from_yaml","text":"file configuration define steps, yaml summary_dir character string file path specifying directory summary log stored. root_dir root dir yaml file summary logical TRUE (default) summary.html generated. FALSE summary generation skipped. steps optional argument can used certain steps within config files executed. cli_level function cli","code":""},{"path":"/reference/normalize_with_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize a Path with Respect to a Base Directory — normalize_with_base","title":"Normalize a Path with Respect to a Base Directory — normalize_with_base","text":"function normalizes given path respect specified base directory. path relative, combines base directory path, normalizes resulting path. path absolute starts ~, normalizes path directly. base directory specified, current working directory used base.","code":""},{"path":"/reference/normalize_with_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize a Path with Respect to a Base Directory — normalize_with_base","text":"","code":"normalize_with_base(path, base = \".\")"},{"path":"/reference/normalize_with_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize a Path with Respect to a Base Directory — normalize_with_base","text":"path character string representing path normalized. Can relative, absolute, start ~. base character string representing base directory respect path normalized. default current working directory (\".\").","code":""},{"path":"/reference/normalize_with_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize a Path with Respect to a Base Directory — normalize_with_base","text":"character string representing normalized path.","code":""},{"path":"/reference/normalize_with_base.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize a Path with Respect to a Base Directory — normalize_with_base","text":"","code":"if (FALSE) { # \\dontrun{ base <- \"/my/base/directory\" relative_path <- \"subdir/file.txt\" normalized_path <- normalize_with_base(relative_path, base) print(normalized_path)  # Using the current working directory as the base relative_path <- \"subdir/file.txt\" normalized_path <- normalize_with_base(relative_path) print(normalized_path)  # Using an absolute path absolute_path <- \"/another/directory/subdir/file.txt\" normalized_path <- normalize_with_base(absolute_path) print(normalized_path)  # Using a path starting with ~ home_path <- \"~/subdir/file.txt\" normalized_path <- normalize_with_base(home_path) print(normalized_path) } # }"},{"path":"/reference/one_step_logging.html","id":null,"dir":"Reference","previous_headings":"","what":"Logging one step from yaml — one_step_logging","title":"Logging one step from yaml — one_step_logging","text":"Logging one step yaml","code":""},{"path":"/reference/one_step_logging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging one step from yaml — one_step_logging","text":"","code":"one_step_logging(step, summary_dir, summary, root_dir, cli_level = cli::cli_h1)"},{"path":"/reference/one_step_logging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logging one step from yaml — one_step_logging","text":"step step yaml (list R) summary_dir character string file path specifying directory summary log stored. summary logical TRUE (default) summary.html generated. FALSE summary generation skipped. root_dir root dir yaml file cli_level function cli","code":""},{"path":"/reference/options.html","id":null,"dir":"Reference","previous_headings":"","what":"whirl Options — options","title":"whirl Options — options","text":"Internally used, package-specific options. options prioritize R options() values, fall back environment variables undefined. neither option environment variable set, default value used.","code":""},{"path":"/reference/options.html","id":"checking-option-values","dir":"Reference","previous_headings":"","what":"Checking Option Values","title":"whirl Options — options","text":"Option values specific whirl can accessed passing package name env.","code":"options::opts(env = \"whirl\")  options::opt(x, default, env = \"whirl\")"},{"path":"/reference/options.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"whirl Options — options","text":"verbosity_level default: \"verbose\" option: whirl.verbosity_level envvar: R_WHIRL_VERBOSITY_LEVEL (evaluated possible, raw string otherwise) track_files_discards default: c(\"^/lib\", \"^/etc\", \"^/lib64\", \"^/usr\", \"^/var\", \"^/opt\", \"^/sys\",     \"^/proc\", \"^/tmp\", \"^/null\", \"^/urandom\", \"^/.cache\", .libPaths()) option: whirl.track_files_discards envvar: R_WHIRL_TRACK_FILES_DISCARDS (character vector, split ';' delimiter) track_files default: FALSE option: whirl.track_files envvar: R_WHIRL_TRACK_FILES (TRUE one 'TRUE', '1', FALSE otherwise) out_formats default: \"html\" option: whirl.out_formats envvar: R_WHIRL_OUT_FORMATS (evaluated possible, raw string otherwise) approved_pkgs_folder default: NULL option: whirl.approved_pkgs_folder envvar: R_WHIRL_APPROVED_PKGS_FOLDER (character vector, split ';' delimiter) check_renv default: FALSE option: whirl.check_renv envvar: R_WHIRL_CHECK_RENV (TRUE one 'TRUE', '1', FALSE otherwise) track_files_keep default: paste0(\"^\", getwd()) option: whirl.track_files_keep envvar: R_WHIRL_TRACK_FILES_KEEP (character vector, split ';' delimiter) approved_pkgs_url default: NULL option: whirl.approved_pkgs_url envvar: R_WHIRL_APPROVED_PKGS_URL (character vector, split ';' delimiter)","code":"\"verbose\" c(\"^/lib\", \"^/etc\", \"^/lib64\", \"^/usr\", \"^/var\", \"^/opt\", \"^/sys\",     \"^/proc\", \"^/tmp\", \"^/null\", \"^/urandom\", \"^/.cache\", .libPaths()) FALSE \"html\" NULL FALSE paste0(\"^\", getwd()) NULL"},{"path":[]},{"path":"/reference/options_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal reuse of options description — options_params","title":"Internal reuse of options description — options_params","text":"Internal reuse options description","code":""},{"path":"/reference/options_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal reuse of options description — options_params","text":"verbosity_level chatty log ? Possibilities quiet, verbose, debug. (Defaults \"verbose\", overwritable using option 'whirl.verbosity_level' environment variable 'R_WHIRL_VERBOSITY_LEVEL') track_files_discards List file naming patterns tracked track_files = TRUE (Defaults c(\"^/lib\", \"^/etc\", \"^/lib64\", \"^/usr\", \"^/var\", \"^/opt\", \"^/sys\", ;     \"^/proc\", \"^/tmp\", \"^/null\", \"^/urandom\", \"^/.cache\", .libPaths()), overwritable using option 'whirl.track_files_discards' environment variable 'R_WHIRL_TRACK_FILES_DISCARDS') track_files files read written tracked? Currently supported Linux. (Defaults FALSE, overwritable using option 'whirl.track_files' environment variable 'R_WHIRL_TRACK_FILES') out_formats log format(s) produce. Possiblities html, json, markdown formats:gfm, commonmark, markua. See also details. (Defaults \"html\", overwritable using option 'whirl.out_formats' environment variable 'R_WHIRL_OUT_FORMATS') approved_pkgs_folder Approved folder library packages (Defaults NULL, overwritable using option 'whirl.approved_pkgs_folder' environment variable 'R_WHIRL_APPROVED_PKGS_FOLDER') check_renv projects renv status checked? (Defaults FALSE, overwritable using option 'whirl.check_renv' environment variable 'R_WHIRL_CHECK_RENV') track_files_keep List file naming patterns alway tracked track_files = TRUE (Defaults paste0(\"^\", getwd()), overwritable using option 'whirl.track_files_keep' environment variable 'R_WHIRL_TRACK_FILES_KEEP') approved_pkgs_url Approved URL library packages (Defaults NULL, overwritable using option 'whirl.approved_pkgs_url' environment variable 'R_WHIRL_APPROVED_PKGS_URL')","code":""},{"path":"/reference/read_regexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch files if path uses regular expression — read_regexp","title":"Fetch files if path uses regular expression — read_regexp","text":"Fetch files path uses regular expression","code":""},{"path":"/reference/read_regexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch files if path uses regular expression — read_regexp","text":"","code":"read_regexp(input)"},{"path":"/reference/read_regexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch files if path uses regular expression — read_regexp","text":"input character vector paths files executed.","code":""},{"path":"/reference/read_regexp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch files if path uses regular expression — read_regexp","text":"character vector paths files. regexp used input solved actual files matching criteria.","code":""},{"path":"/reference/render_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Render dataframe into a summary.html file — render_summary","title":"Render dataframe into a summary.html file — render_summary","text":"Render dataframe summary.html file","code":""},{"path":"/reference/render_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render dataframe into a summary.html file — render_summary","text":"","code":"render_summary(input, summary_file = \"summary.html\")"},{"path":"/reference/render_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render dataframe into a summary.html file — render_summary","text":"input input data.frame rendered summary.html file summary_file character string specifying path summary HTML file saved. Defaults \"summary.html\".","code":""},{"path":"/reference/render_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render dataframe into a summary.html file — render_summary","text":"Takes dataframe input returns log html format","code":""},{"path":"/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute single or multiple R, R Markdown, and Quarto scripts — run","title":"Execute single or multiple R, R Markdown, and Quarto scripts — run","text":"Execute single multiple R, R Markdown, Quarto scripts","code":""},{"path":"/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute single or multiple R, R Markdown, and Quarto scripts — run","text":"","code":"run(input, log_dir = NULL, steps = NULL, n_workers = NULL, summary_dir = \".\")"},{"path":"/reference/run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute single or multiple R, R Markdown, and Quarto scripts — run","text":"input character vector file path(s) R, R Markdown, Quarto scripts, files folder using regular expression, whirl config file. input can also structured list element executed parallel. log_dir character string file path(s) specifying directories logs individual script(s) stored. one folder specified logs stored folder. multiple paths specified match length input argument. steps optional argument can used certain steps within config files executed. equivalent names steps found config file. kept NULL (default) steps listed config file executed. n_workers Integer specifying number cores use parallel execution. NULL (default), use minimum total number available cores - 1 8. summary_dir character string specifying file path summary log stored. Default current working directory.","code":""},{"path":"/reference/run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute single or multiple R, R Markdown, and Quarto scripts — run","text":"tibble containing execution results scripts.","code":""},{"path":"/reference/run_by_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create logs for files from a yaml configuration — run_by_config","title":"Create logs for files from a yaml configuration — run_by_config","text":"Create logs files yaml configuration","code":""},{"path":"/reference/run_by_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create logs for files from a yaml configuration — run_by_config","text":"","code":"run_by_config(   file,   steps = NULL,   summary_dir = \".\",   summary = TRUE,   root_dir = dirname(file) )"},{"path":"/reference/run_by_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create logs for files from a yaml configuration — run_by_config","text":"file yaml configuration file steps optional argument can used certain steps within config files executed. summary_dir character string file path specifying directory summary log stored. summary logical TRUE (default) summary.html generated. FALSE summary generation skipped. root_dir default, root dir yaml file.","code":""},{"path":"/reference/run_by_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create logs for files from a yaml configuration — run_by_config","text":"list containing execution results script. element list character string indicating success failure script execution.","code":""},{"path":"/reference/run_by_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create logs for files from a yaml configuration — run_by_config","text":"","code":"if (FALSE) {  file_ <- system.file(   \"examples\",   \"sequence_exuction\",   \"_whirl.yaml\",   package = \"whirl\" ) run_by_config(file_, tempdir()) }"},{"path":"/reference/run_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute multiple R, R Markdown, and Quarto scripts — run_paths","title":"Execute multiple R, R Markdown, and Quarto scripts — run_paths","text":"function executes multiple R scripts (.R), renders R Markdown documents (.Rmd), Quarto documents (.qmd). can process individual files supported files specified folder, options parallel execution.","code":""},{"path":"/reference/run_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute multiple R, R Markdown, and Quarto scripts — run_paths","text":"","code":"run_paths(   paths = \".\",   parallel = FALSE,   num_cores = NULL,   summary_dir = getwd(),   summary = TRUE,   ... )"},{"path":"/reference/run_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute multiple R, R Markdown, and Quarto scripts — run_paths","text":"paths character vector file paths R, R Markdown, Quarto scripts folder. parallel Logical; TRUE, scripts executed parallel. Default FALSE. num_cores Integer specifying number cores use parallel execution. NULL (default), use one less total number available cores. summary_dir character string file path specifying directory summary log stored. summary logical TRUE (default) summary.html generated. FALSE summary generation skipped. ... Additional arguments","code":""},{"path":"/reference/run_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute multiple R, R Markdown, and Quarto scripts — run_paths","text":"list containing execution results script. element list character string indicating success failure script execution.","code":""},{"path":"/reference/run_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Run script test with a single script — run_script","title":"Run script test with a single script — run_script","text":"Run script test single script","code":""},{"path":"/reference/run_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run script test with a single script — run_script","text":"","code":"run_script(   script,   track_files = options::opt(\"track_files\", env = \"whirl\"),   check_renv = options::opt(\"check_renv\", env = \"whirl\"),   out_formats = options::opt(\"out_formats\", env = \"whirl\"),   approved_pkgs_folder = options::opt(\"approved_pkgs_folder\", env = \"whirl\"),   approved_pkgs_url = options::opt(\"approved_pkgs_url\", env = \"whirl\"),   out_dir = dirname(script) )"},{"path":"/reference/run_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run script test with a single script — run_script","text":"script path track_files files read written tracked? Currently supported Linux. (Defaults FALSE, overwritable using option 'whirl.track_files' environment variable 'R_WHIRL_TRACK_FILES') check_renv projects renv status checked? (Defaults FALSE, overwritable using option 'whirl.check_renv' environment variable 'R_WHIRL_CHECK_RENV') out_formats log format(s) produce. Possiblities html, json, markdown formats:gfm, commonmark, markua. See also details. (Defaults \"html\", overwritable using option 'whirl.out_formats' environment variable 'R_WHIRL_OUT_FORMATS') approved_pkgs_folder Approved folder library packages (Defaults NULL, overwritable using option 'whirl.approved_pkgs_folder' environment variable 'R_WHIRL_APPROVED_PKGS_FOLDER') approved_pkgs_url Approved URL library packages (Defaults NULL, overwritable using option 'whirl.approved_pkgs_url' environment variable 'R_WHIRL_APPROVED_PKGS_URL') out_dir description","code":""},{"path":"/reference/util_queue_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a summary tibble from a queue table — util_queue_summary","title":"Generate a summary tibble from a queue table — util_queue_summary","text":"function takes queue table input generates summary tibble columns Directory, Filename, Status, Hyperlink, Information.","code":""},{"path":"/reference/util_queue_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a summary tibble from a queue table — util_queue_summary","text":"","code":"util_queue_summary(queue_table)"},{"path":"/reference/util_queue_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a summary tibble from a queue table — util_queue_summary","text":"queue_table queue table containing result data","code":""},{"path":"/reference/util_queue_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a summary tibble from a queue table — util_queue_summary","text":"tibble summarizing queue table data","code":""},{"path":"/reference/whirl-package.html","id":null,"dir":"Reference","previous_headings":"","what":"whirl: Logging package — whirl-package","title":"whirl: Logging package — whirl-package","text":"Provides functionalities running R scripts batch, simultanously creating logs script execution.","code":""},{"path":"/reference/whirl-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"whirl: Logging package — whirl-package","text":"Maintainer: Aksel Thomsen oath@novonordisk.com Authors: Lovemore Gakava lvgk@novonordisk.com Cervan Girard cgid@novonordisk.com Kristian Troejelsgaard ktqn@novonordisk.com contributors: Novo Nordisk /S [copyright holder]","code":""},{"path":"/news/index.html","id":"whirl-003-2024-08-26","dir":"Changelog","previous_headings":"","what":"whirl 0.0.3 (2024-08-26)","title":"whirl 0.0.3 (2024-08-26)","text":"Initial commit run() wrapper run_script(), run_paths() run_by_config(). steps argument added run() allowing user select certain steps config file executed. Substituting spinner progress bar executing single scripts. Adjusting messages uniform regardless scripts executed whirl package","code":""},{"path":"/news/index.html","id":"whirl-002","dir":"Changelog","previous_headings":"","what":"whirl 0.0.2","title":"whirl 0.0.2","text":"Update execution (including order execution) can controlled config file","code":""},{"path":"/news/index.html","id":"whirl-001","dir":"Changelog","previous_headings":"","what":"whirl 0.0.1","title":"whirl 0.0.1","text":"First release internal package repository.","code":""}]
