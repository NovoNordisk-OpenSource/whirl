---
title: "`r basename(params$title)`"
date: "`r Sys.time()`"
date-format: "YYYY-MM-DDTHH:mm:ss zzz"
abstract: "`r params$title`"
template-partials:
  - title-block.html
params:
  title: 'dev'
  check_approved_folder_pkgs: NULL
  check_approved_url_pkgs: NULL
  with_library_paths: library_paths
  tmpdir: '.'
format:
  html:
    embed-resources: true
    toc: true
    toc-depth: 2
    toc-expand: true
    smooth-scroll: true
---

# Summary

```{r}
#| label: Setup
#| echo: false
.libPaths(c(character(), params$with_library_paths))

knit_print.data.frame = function(x, ...) {
  x |> 
    knitr::kable() |>
    kableExtra::kable_styling(
      bootstrap_options = "striped",
      full_width = TRUE
    ) |>
  knitr::knit_print()
}

registerS3method("knit_print", "data.frame", knit_print.data.frame, envir = asNamespace("knitr"))
```

```{r}
#| label: Status
#| echo: false
result <- withr::with_dir(
    new = params$tmpdir, 
    code = {
      whirl:::read_info("script.rds", "doc.md", "start.rds", "log_msg.json", "session_info.rds", "environment.rds", "options.rds", "python_imports.json")
    })

saveRDS(
  object = result, 
  file = file.path(params$tmpdir, "result.rds")
)

status <- result$status

status_txt <- status[c("error", "warning")]
status_txt <- status_txt[lapply(status_txt, length) > 0] |>
  lapply(\(x) paste("*", x, collapse = "\n")) |>
  unlist()

whirl:::quarto_callout(
  text = status_txt,
  title = status$message,
  type = switch(status$message,
    "error" = "important",
    "warning" = "warning",
    "success" = "tip"
  ),
  collapse = status$message != "success"
)
```

```{r}
#| label: Renv
#| echo: false
#| eval: !expr file.exists(file.path(params$tmpdir, "renv_status.rds"))
params$tmpdir |>
  file.path("renv_status.rds") |>
  readRDS()
```

```{r}
#| label: Track files
#| echo: false
log_info <- whirl:::read_from_log()
use_log_info <- nrow(log_info) > 0

use_log_info <- FALSE

if (use_log_info) {
  log_info <- log_info |>
    dplyr::arrange(time) |>
    whirl:::split_log()
}
```

```{r}
#| echo: false
#| results: asis
#| eval: !expr use_log_info
cat("## Input", "\n")
```

```{r}
#| echo: false
#| eval: !expr use_log_info
log_info$read
```

```{r}
#| echo: false
#| results: asis
#| eval: !expr use_log_info
cat("## Output", "\n")
```

```{r}
#| echo: false
#| eval: !expr use_log_info
log_info$write
```

```{r}
#| echo: false
#| results: asis
#| eval: !expr use_log_info
cat("## Removed", "\n")
```

```{r}
#| echo: false
#| eval: !expr use_log_info
log_info$delete
```

# Script

```{r}
#| child: !expr file.path(params$tmpdir, "doc.md")
```

# Session info

```{r}
#| label: Session info settings
#| include: false
knitr::opts_chunk$set(
  error = FALSE,
  warning = FALSE,
  message = FALSE,
  echo = FALSE
)
```

## Platform

```{r}
#| label: Platform
result$session$platform
```

```{r}
#| label: Python
#| results: asis
#| eval: !expr grepl("\\.py$", params$title)
cat("\n## Python Packages\n")

result$session$python
```

## R Packages

```{r}
#| label: R
#| results: asis
#| fig.height: 0.5
if (!is.null(params$check_approved_folder_pkgs) ||
      !is.null(params$check_approved_url_pkgs)) {
  whirl:::create_approval_plot(info$packages |> data.frame())
}

cat("\n")
```

```{r}
result$session$R
```

## Environment variables

```{r}
#| label: Environment
result$session$environment
```

## Options

```{r}
#| label: Options
result$session$options
```
