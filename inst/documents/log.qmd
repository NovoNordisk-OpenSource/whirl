---
title: "`r basename(params$title)`"
date: "`r Sys.time()`"
date-format: "YYYY-MM-DDTHH:mm:ss zzz"
abstract: "`r params$title`"
template-partials:
  - title-block.html
params:
  title: 'dev'
  with_library_paths: library_paths
  approved_packages: NULL
  track_files: FALSE
  tmpdir: '.'
format:
  html:
    embed-resources: true
    toc: true
    toc-depth: 2
    toc-expand: true
    smooth-scroll: true
    css: style.css
---

# Summary


```{r}
#| label: Setup
#| echo: false
.libPaths(c(character(), params$with_library_paths))

file.path(params$tmpdir, "parent_options.rds") |>
  readRDS() |>
  options()

knit_print.data.frame <- function(x, ...) {
  names(x) <- gsub( # Use space instead of . or _ in columns names
    pattern = "\\.|_",
    replacement = " ",
    x = names(x)
  )

  names(x) <- gsub( # Convert all column names to title case
    pattern = "\\b([[:alpha:]])([[:alpha:]]+)",
    replacement = "\\U\\1\\L\\2",
    x = names(x),
    perl = TRUE
  )

  for (i in which(vapply(X = x, FUN = is.logical, FUN.VALUE = logical(1)))) {
    x[[i]] <- ifelse(x[[i]], "Yes", "No") # Yes/No instead of TRUE/FALSE
  }

  if ("Approved" %in% colnames(x)) {
    x |> 
      knitr::kable(format = "html") |>  
      kableExtra::column_spec(
        1:ncol(x), 
        background = ifelse(grepl("Yes", x[["Approved"]]), "#ebf5f1", "#fceeef")
       ) |>
      kableExtra::column_spec(
        which(names(x) == "Approved"),
        color = ifelse(grepl("Yes", x[["Approved"]]), "green", "red")
      ) |>   
      kableExtra::kable_styling(
        bootstrap_options = "striped",
        full_width = TRUE
      ) |>
      knitr::knit_print()
    } else {
    x |> 
      knitr::kable(format = "html") |>    
      kableExtra::kable_styling(
        bootstrap_options = "striped",
        full_width = TRUE
      ) |>
      knitr::knit_print()
    }
}

registerS3method("knit_print", "data.frame", knit_print.data.frame, envir = asNamespace("knitr"))
```

```{r}
#| label: Status
#| echo: false
result <- whirl:::read_info(
  script = file.path(params$tmpdir, "script.rds"),
  md = file.path(params$tmpdir, "doc.md"), 
  start = file.path(params$tmpdir, "start.rds"),
  log = file.path(params$tmpdir, "log_msg.json"),
  pkgs_used = file.path(params$tmpdir, "pkgs_used.rds"),
  session = file.path(params$tmpdir, "session_info.rds"),
  environment = file.path(params$tmpdir, "environment.rds"),
  options = file.path(params$tmpdir, "options.rds"),
  python = file.path(params$tmpdir, "python_imports.json"),
  approved_packages = params$approved_packages,
  track_files = isTRUE(as.logical(params$track_files))
)

saveRDS(
  object = result, 
  file = file.path(params$tmpdir, "result.rds")
)

status <- result$status

status_txt <- status[c("error", "warning")]
status_txt <- status_txt[lapply(status_txt, length) > 0] |>
  lapply(\(x) paste("*", x, collapse = "\n")) |>
  unlist()

whirl:::quarto_callout(
  text = status_txt,
  title = status$message,
  type = switch(status$message,
    "error" = "important",
    "warning" = "warning",
    "success" = "tip"
  ),
  collapse = status$message != "success"
)
```

```{r}
#| label: Renv
#| echo: false
#| eval: !expr file.exists(file.path(params$tmpdir, "renv_status.rds"))
params$tmpdir |>
  file.path("renv_status.rds") |>
  readRDS() |> 
  whirl:::knit_print_whirl_renv_status()
```

```{r}
#| label: Used files
#| child: !expr file.path(params$tmpdir, "files.qmd")
#| eval: !expr (!is.null(result$files))
```

# Script
::: {.script-container}
```{r}
#| child: !expr file.path(params$tmpdir, "doc.md")
```
::: 
# Session info

```{r}
#| label: Session info settings
#| include: false
knitr::opts_chunk$set(
  error = FALSE,
  warning = FALSE,
  message = FALSE,
  echo = FALSE
)
```


:::{.callout-note collapse=true appearance="minimal"}
## Platform

```{r}
#| label: Platform
result$session$platform
```
:::


```{r}
#| label: Python
#| child: !expr file.path(params$tmpdir, "python.qmd")
#| eval: !expr grepl("\\.py$", params$title)
```

:::{.callout-note collapse=false appearance="minimal"}
## R packages used directly

```{r}
#| label: R packages used directly
if (all(is.na(result$session$directly_used$approved))) {
  result$session$directly_used[c("package", "version", "attached", "source")]
} else {
  result$session$directly_used[c("package", "version", "attached", "source", "approved")]}   
```
:::

:::{.callout-note collapse=true appearance="minimal"}
## R packages used indirectly


```{r}
#| label: R packages used indirectly
#| collapse: true
result$session$indirectly_used[c("package", "version", "attached", "source")]
```
:::

:::{.callout-note collapse=true appearance="minimal"}
## Environment variables

```{r}
#| label: Environment
result$session$environment
```
:::

:::{.callout-note collapse=true appearance="minimal"}
## Options

```{r}
#| label: Options
result$session$options
```
:::
